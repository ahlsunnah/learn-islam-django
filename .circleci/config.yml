version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/learn_islam
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: abumalick/alpine-python-pipenv-postgres:latest
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          POSTGRES_DB: learn_islam
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: debug
          POSTGRES_PASSWORD: debug
          DATABASE_URL: postgres://debug:debug@postgres:5432/learn_islam
          CELERY_FLOWER_USER: 'debug'
          CELERY_FLOWER_PASSWORD: 'debug'
          REDIS_URL: 'redis://redis:6379/0'
          CELERY_BROKER_URL: 'TODO'
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:latest
        environment: # environment variables for the Postgres container.
          POSTGRES_DB: learn_islam
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: debug
          POSTGRES_PASSWORD: debug
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pipenv install --deploy --dev
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          command: |
            pipenv run python manage.py test
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: tr1
